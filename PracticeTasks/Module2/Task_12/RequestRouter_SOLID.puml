@startuml
class RequestRouter {
  +cacheManager: CacheManagerInterface
  +loadBalancer: LoadBalancerInterface
  +Validator: ValidatorInterface
  +routes: Route[]
  +Forward(request: Request): result_t
  +GetRoutes(routes: Route[]): result_t
  +SetRoutes(routes: Route[]): result_t
}

interface CacheManagerInterface {
  {abstract} +SetCache(request: Request, response: Response): result_t
  {abstract} +GetFromCache(request: Request): Response
}

class CacheManagerImpl implements CacheManagerInterface {
  +cache: CacheEntry[]
  +SetCache(request: Request, response: Response): result_t
  +GetFromCache(request: Request): Response
}

interface LoadBalancerInterface {
  {abstract} +GetWeight(id: int, out value: int): result_t
  {abstract} +SetWeight(id: int, value: int): result_t
}

class LoadBalancerImpl implements LoadBalancerInterface {
  +weights: map<id: int, weight: int>
  +GetWeight(id: int, out value: int): result_t
  +SetWeight(id: int, value: int): result_t
}

interface ValidatorInterface {
  {abstract} +Validate(request: Request): result_t
}

class ValidatorImpl implements ValidatorInterface {
  +schema: OpenApiSchema
  +Validate(request: Request): result_t
}

RequestRouter --> CacheManagerInterface
RequestRouter --> LoadBalancerInterface
RequestRouter --> ValidatorInterface
@enduml
