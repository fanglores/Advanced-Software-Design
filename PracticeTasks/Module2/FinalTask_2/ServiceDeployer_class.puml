@startuml
class ServiceDeployer <<root>> {
  -repository: RepositoryInterface
  -orchestrator: OrchestrationInterface
  -containerizer: ContainerizerInterface
  -modelData: ModelDataInterface
  +replicaSet: ReplicaSet
  +service: Service
  +manifest: Manifest
  +Deploy(): result_t
}

class ContainerizerImpl <<service>> {
  + Containerize(imageName: string): result_t
}

class CRDStrategy <<entity>> {
  + extractModelData(schema: JSON): result_t
}

class SourceCodeStrategy <<entity>> {
  + extractModelData(schema: JSON): result_t
}

class GitAdapter <<entity>> {
  + GetFileContents(url: string, data: string): result_t
}

class ReplicaSet <<entity>> {
  +id: string
  +replicas: uint
  +dockerImage: string
}

class Service <<entity>> {
  +id: string
  +ip: string
  +name: string
}

class Manifest <<value object>> {
  +name: string
  +repoUrl: string
  +modelType: string
  +modelClass: string
}

class KubernetesAdapter <<entity>> {
  + deployService(serviceId: String, replicas: Int): result_t
  + scaleReplicas(serviceId: String, replicas: Int): result_t
  + getStatus(serviceId: String): String
  + getCRD(serviceId: String, crd: String): result_t
}

ServiceDeployer *-up- Service
ServiceDeployer *-up- ReplicaSet
ServiceDeployer *-up- Manifest

ServiceDeployer --> ContainerizerImpl
ServiceDeployer --> CRDStrategy
ServiceDeployer --> SourceCodeStrategy
ServiceDeployer --> GitAdapter
ServiceDeployer --> KubernetesAdapter
@enduml
